@using Nop.Core
@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    var stickyCategoryMenuFlyout = true;
    var showCategoriesInSideMenu = true;
}

<div class="header">
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderBefore })
    <div class="header-upper">
        <div class="header-selectors-wrapper">
            @await Component.InvokeAsync(typeof(TaxTypeSelectorViewComponent))
            @await Component.InvokeAsync(typeof(CurrencySelectorViewComponent))
            @await Component.InvokeAsync(typeof(LanguageSelectorViewComponent))
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderSelectors })
        </div>
    </div>

    <div class="header-lower">
        <div class="header-logo">
            @await Component.InvokeAsync(typeof(LogoViewComponent))
        </div>
        <div class="search-box store-search-box" style="width: 800px">
            <div class="header-menu">
                <div class="close-menu">
                    <span class="close-menu-text">@T("SevenSpikes.Themes.Common.MenuTitle")</span>
                    <span class="close-menu-btn">@T("SevenSpikes.Themes.Common.CloseMenu")</span>
                </div>
                @{
                    var menuHtml = await Component.InvokeAsync("Widget", new { widgetZone = "theme_header_menu" });
                }
                @if (!string.IsNullOrEmpty(await menuHtml.RenderHtmlContentAsync()))
                {
                    @menuHtml
                }
                else
                {
                    @await Component.InvokeAsync(typeof(TopMenuViewComponent))
                }
                <div class="mobile-menu-items"></div>
            </div>
        </div>
        <div class="header-links-wrapper">
            @await Component.InvokeAsync(typeof(HeaderLinksViewComponent))
        </div>
    </div>

    <div class="header-lower">
        <div class="search-box store-search-box">
            <div class="close-side-menu">
                <span class="close-side-menu-text">@T("Search.SearchBox.Tooltip")</span>
                <span class="close-side-menu-btn">@T("SevenSpikes.Themes.Common.CloseMenu")</span>
            </div>
            @await Component.InvokeAsync(typeof(SearchBoxViewComponent))
        </div>
    </div>
    <div class="header-lower" style="padding-right:400px">
        <div class="header-menu">
            @{
                var menu2Html = await Component.InvokeAsync("Widget", new { widgetZone = "theme_header_menu2" });
            }
            @if (!String.IsNullOrEmpty(await menu2Html.RenderHtmlContentAsync()))
            {
                @menu2Html
            }
        </div>
    </div>
</div>
@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderAfter })